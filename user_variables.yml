---
debug: false
region: ZO-PNW
install_method: source
dhcp_domain: cloud.zeroone.tech
openstack_domain: cloud.zeroone.tech
availability_zone: "ZO-PNW-LVW"
service_region: "ZO-PNW"

#################
## Ceph Config ##
#################
ceph_pkg_source: distro
ceph_stable_release: reef
ceph_conf_file: |
  [global]
  fsid = 919e214a-3306-11ed-9c01-83df3116c858 
  mon_initial_members = ceph-01,ceph-02,ceph-03,ceph-04,ceph-05
  mon_host = [v2:10.0.16.1:3300,v1:10.0.16.1:6789],[v2:10.0.16.2:3300,v1:10.0.16.2:6789],[v2:10.0.16.3:3300,v1:10.0.16.3:6789],[v2:10.0.16.4:3300,v1:10.0.16.4:6789],[v2:10.0.16.5:3300,v1:10.0.16.5:6789]
ceph_keyrings_dir: "/etc/openstack_deploy/ceph-keyrings"

#####################  
## Rabbitmq config ##
#####################
#rabbitmq_use_ssl: true 
rabbitmq_monitoring_userid: "zoadmin"
rabbitmq_port_bindings:
  ssl_listeners:
    "0.0.0.0": 5671
  tcp_listeners:
    "0.0.0.0": 5672

####################
## HAProxy config ##
####################
haproxy_keepalived_external_vip_cidr: "10.0.47.253/20"
haproxy_keepalived_internal_vip_cidr: "{{internal_lb_vip_address}}/20"
haproxy_keepalived_external_interface: br-mgmt
haproxy_keepalived_internal_interface: br-mgmt
#haproxy_ssl: True
#haproxy_ssl_letsencrypt_enable: True
#haproxy_ssl_letsencrypt_install_method: "distro"
#haproxy_ssl_letsencrypt_email: "admin@zeroone.tech"
haproxy_user_ssl_cert: "/etc/ssl/certs/zeroone.pem"
haproxy_user_ssl_key: "/etc/ssl/private/zeroone.key"
haproxy_user_ssl_ca_cert: "/etc/ssl/certs/zeroone_ca.pem"
openstack_service_publicuri_proto: https
haproxy_extra_services:
  - service:
      haproxy_service_name: ceph_rgw
      haproxy_backend_nodes: "{{ groups['cephrgwdummy_hosts'] }}"
      haproxy_ssl: True
      haproxy_port: 8080
      haproxy_balance_alg: source
      haproxy_balance_type: http
      haproxy_backend_options:
        - "httpchk HEAD /"
keepalived_package_state: "latest"

####################
## Skyline config ##
####################

skyline_service_region: "{{ region }}"
# Per bug: https://bugs.launchpad.net/openstack-ansible/+bug/2115986/
skyline_git_constraints:
  - "--constraint {{ skyline_upper_constraints_url }}"

####################
## Cinder configs ##
####################
cinder_service_region: "{{ region }}"
cinder_ceph_client: "cinder"
cinder_backends:
  rbd:
    volume_driver: cinder.volume.drivers.rbd.RBDDriver
    rbd_pool: volumes
    rbd_ceph_conf: /etc/ceph/ceph.conf
    rbd_store_chunk_size: 8
    volume_backend_name: rbd
    rbd_max_clone_depth: 5
    rados_connect_timeout: -1
    rbd_user: "{{ cinder_ceph_client }}"
    rbd_secret_uuid: "{{ cinder_ceph_client_uuid }}"
    report_discard_supported: True 
    rbd_flatten_volume_from_snapshot: True
cinder_backend_rbd_inuse: '{{ (cinder_backends|default("")|to_json).find("cinder.volume.drivers.rbd.RBDDriver") != -1 }}'
cinder_active_active_cluster: "{{ cinder_backend_rbd_inuse }}"
cinder_active_active_cluster_name: ceph
cinder_storage_availability_zone: "{{ availability_zone }}"
cinder_service_backup_program_enabled: True
cinder_service_backup_driver: cinder.backup.drivers.ceph.CephBackupDriver
cinder_service_backup_ceph_user: cinder-backup
cinder_service_backup_ceph_pool: backups_slow

####################
## Neutron config ##
####################
neutron_service_region: "{{ region }}"
neutron_plugin_type: ml2.ovn
neutron_plugin_base:
  - ovn-router
    #  - ovn-vpnaas
neutron_ml2_drivers_type: "flat,geneve,vlan"
neutron_availability_zone: "{{ availability_zone }}"
neutron_default_availability_zones: ["{{ availability_zone }}"]
neutron_ovn_ssl: True
neutron_agent_down_time: 9999
neutron_use_uwsgi: False
neutron_quota_floatingip: 1
neutron_quota_network: 1
neutron_quota_router: 1
global_overrides:
  neutron_provider_networks:
    network_types: "geneve"
    network_geneve_range: "1:10000"
    network_vlan_ranges: "public,lbaas,dbaas,vlan:1120:1199,3000:3001,4001:4001"
    network_mappings: "public:br-wan,lbaas:br-lbaas,dbaas:br-dbaas,vlan:br-vlan"
    network_interface_mappings: "br-wan:eth99,br-lbaas:bond0.1102,br-dbaas:bond0.1103,br-vlan:bond0"
neutron_policy_overrides:
  create_port: "(rule:admin_only) or (role:member and project_id:%(project_id)s) or rule:service_api and rule:shared"
  "create_port:device_owner": "not rule:network_device or (rule:admin_only) or (rule:service_api) or role:member and rule:network_owner or rule:shared"
  "create_port:fixed_ips:ip_address": "(rule:admin_only) or (rule:service_api) or role:member and rule:network_owner or rule:shared"
  "create_port:port_security_enabled": "(rule:admin_only) or (rule:service_api) or role:member and rule:network_owner or rule:shared"
  "update_port:port_security_enabled": "(rule:admin_only) or (rule:service_api) or role:member and rule:network_owner or rule:shared or projec_id:%porject_id)s"
  "update_port:device_owner": "not rule:network_device or (rule:admin_only) or (rule:service_api) or role:member and rule:network_owner or role:member and project_id:%(project_id)s"
  "update_port:binding:host_id": "(rule:admin_only) or role:member and project_id:%(project_id)s"

####################
## horizon config ##
####################
horizon_service_region: "{{ region }}"
horizon_keystone_multidomain_support: True
horizon_keystone_default_domain: Default
horizon_enable_password_retrieve: True
horizon_enable_ha_router: True
horizon_default_dns_nameservers: ["1.1.1.1","8.8.8.8"]
horizon_session_timeout: 3600
horizon_enable_octavia_ui: True
horizon_enable_magnum_ui: True
  #horizon_custom_themes:
  #  darkly:
  #    theme_name: "darkly"
  #    theme_label: "Darkly"
  #    theme_path: "themes/darkly"
  #    theme_src_archive: "/etc/openstack_deploy/horizon/themes/darkly.tar.gz"
      

#####################
## Keystone config ##
#####################
keystone_service_region: "{{ region }}"
keystone_conf_overrides:
  IDENTITY:
    domain_specific_drivers_enabled: True
      #keystone_git_install_branch: "stable/2023.2"

#################      
## Nova config ##
#################
nova_virt_type: kvm 
nova_service_region: "{{ region }}"
nova_ceph_client: "{{ cinder_ceph_client }}"
nova_ceph_client_uuid: "{{ cinder_ceph_client_uuid }}"
nova_libvirt_hw_disk_discard: 'unmap'
nova_libvirt_disk_cachemodes: 'network=writeback'
nova_libvirt_images_rbd_pool: 'vms'
nova_cinder_rbd_inuse: True
  #nova_nova_conf_overrides:
  #  DEFAULT:
  #    internal_service_availability_zone: "{{ availability_zone }}"
  #    default_availability_zone: "{{ availability_zone }}"
  #    default_schedule_zone: "{{ availability_zone }}"
  #  cinder:
  #    cross_az_attach: True
#nova_enabled_mdev_types:
#  - type: nvidia-65
#    address: 0000:af:00.0
nova_scheduler_extra_filters:
  #  - AvailabilityZoneFilter
  - AggregateInstanceExtraSpecsFilter
nova_console_type: novnc
nova_qemu_vnc_tls: 0
nova_libvirtd_listen_tls: 0
nova_libvirtd_listen_tcp: 1

###################
## Glance config ##
###################
glance_service_region: "{{ region }}"
glance_default_store: rbd
glance_rbd_store_pool: images
glance_glance_api_conf_overrides:
  taskflow_executor:
    conversion_format: "raw"

###################
## Galera config ##
###################
galera_cluster_name: "os-galera-cluster"
openrc_region_name: "{{ region }}"
galera_max_connections: 1600
galera_use_ssl: True

######################
## Placement config ##
######################
placement_service_region: "{{ region }}"

#################
## Heat config ##
#################
heat_service_region: "{{ region }}"


####################
## Octavia config ##
####################
octavia_service_region: "{{ region }}"
octavia_management_net_subnet_cidr: "172.30.0.0/16"
octavia_management_net_subnet_allocation_pools: "172.30.1.0-172.30.3.255"
octavia_management_net_dhcp: True
octavia_service_net_setup: True
octavia_provider_network_name: "lbaas"
#octavia_hm_hosts: "{% for host in groups[octavia_hm_group] %}{{ hostvars[host]['container_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"
octavia_hm_hosts: "{% for host in groups[octavia_hm_group] %}{{ hostvars[host]['management_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"
octavia_amp_availability_zone: "{{ availability_zone }}"
octavia_loadbalancer_topology: "SINGLE"
octavia_amp_flavor_name: "z1.lb"
### Disabling anti-affinity temporarily until new hosts can be added
#octavia_enable_anti_affinity: True
octavia_download_artefact: True
octavia_ssh_enabled: True
octavia_ssh_key_name: octavia
octavia_amp_active_retries: 30
octavia_cinder_enabled: True
octavia_cinder_volume_type: "rbd"
octavia_ip_tables_fw: False

###################
## Magnum config ##
###################
magnum_config_overrides:
  cinder:
    default_docker_volume_type: rbd

####################
## Gnocchi config ##
####################
gnocchi_storage_driver: ceph


######################
## Designate config ##
######################
#designate_pools_yaml:
#  - name: "default"
#    #    id: 3679ea8f-b934-4c0f-b24e-3bc08fbee1b0
#    description: "Bind9 Default Pool"
#    attributes: {}
#    ns_records:
#      - hostname: ns1.zeroone.tech.
#        priority: 1
#    nameservers:
#      - host: 10.0.32.4
#        port: 53
#    targets:
#      - type: bind9
#        description: "ns1.zeroone.tech bind9 server"
#        masters:
#          - host: 10.0.32.4
#            port: 5354
#          - host: 10.0.32.5
#            port: 5354
#          - host: 10.0.32.6 
#            port: 5354
#        options: 
#          host: 10.0.32.4
#          port: 53
#          rndc_host: 10.0.32.4
#          rndc_port: 953
#designate_rndc_keys:
#  - name: "designate"
#    file: /etc/designate/rndc.key
#    algorithm: "hmac-md5"
#    secret: "{{ designate_rndc_secret }}"

################
## Zun config ##
###############
zun_libvirt_images_rbd_pool: vms
zun_galera_use_ssl: false
zun_default_schedule_zone: ZO-PNW-LVW
zun_libvirt_hw_disk_discard: 'unmap'
zun_libvirt_disk_cachemodes: 'network=writeback'
zun_zun_conf_overrides:
  DEFAULT:
    config_drive_format: vfat
    force_config_drive: True
zun_kuryr_system_user_name: root
zun_kuryr_system_group_name: root
zun_console_type: novnc

###########################
## Certificate Authority ##
###########################
openstack_pki_install_ca:
   - name: "ZORoot"
openstack_pki_regen_ca: True
openstack_pki_regen_cert: True
openstack_pki_authorities:
   - name: "ZORoot"
     provider: selfsigned
     email_address: "admin@zeroone.tech"
     basic_constraints: "CA:TRUE"
     cn: "ZeroOne Technology Root CA"
     country_name: "US"
     state_or_province_name: "Washington"
     organization_name: "ZeroOne Technology"
     organizational_unit_name: "IT Security"
     key_usage:
       - digitalSignature
       - cRLSign
       - keyCertSign
     not_after: "+3650d"
   - name: "ZOIntermediate"
     email_address: "admin@zeroone.tech"
     provider: ownca
     cn: "ZeroOne Technology Intermediate CA"
     country_name: "US"
     basic_constraints: "CA:TRUE,pathlen:0"
     state_or_province_name: "Washington"
     organization_name: "ZeroOne Technology"
     organizational_unit_name: "IT Security"
     key_usage:
       - digitalSignature
       - cRLSign
       - keyCertSign
     not_after: "+365d"
     signed_by: "ZORoot"
openstack_pki_service_intermediate_cert_name: "ZOIntermediate"
  #haproxy_nova_spice_console_service:
  #  haproxy_service_name: nova_spice_console
  #  haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) }}"
  #  haproxy_ssl: "{{ haproxy_ssl }}"
  #  haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  #  haproxy_port: "{{ nova_spice_html5proxy_base_port | default('6082') }}"
  #  haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  #  haproxy_timeout_client: 60m
  #  haproxy_timeout_server: 60m
  #  haproxy_balance_alg: source
  #  haproxy_backend_options: "{{ haproxy_nova_console_http_mode | ternary(['httpchk HEAD /spice_auto.html HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck'], []) }}"
  #  haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['expect status 200'], []) }}"
  #  haproxy_service_enabled: "{{ groups['nova_console'] is defined and groups['nova_console'] | length > 0 and nova_console_type == 'spice' }}"
  #  haproxy_nova_spice_console_service:
  #    haproxy_service_name: nova_spice_console
  #    haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) }}"
  #    haproxy_ssl: "{{ haproxy_ssl }}"
  #    haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  #    haproxy_port: "{{ nova_spice_html5proxy_base_port | default('6082') }}"
  #    haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  #    haproxy_timeout_client: 60m
  #    haproxy_timeout_server: 60m
  #    haproxy_balance_alg: source
  #    haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['send ' ~ haproxy_nova_healthcheck_hdr ~ ' meth HEAD uri /spice_auto.html', 'expect status 200'], []) }}"
  #    haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  #    haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  #    haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  #    haproxy_service_enabled: "{{ groups['nova_console'] is defined and groups['nova_console'] | length > 0 and 'spice' in nova_console_proxy_types }}"
  #    haproxy_frontend_raw:
  #      - "http-request deny if { path,url_dec -m sub /. }"
  #
  #haproxy_nova_serial_console_service:
  #  haproxy_service_name: nova_serial_console
  #  haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) + ((ironic_console_type == 'serialconsole') | ternary(groups['ironic_console'] | default([]), [])) }}"
  #  haproxy_ssl: "{{ haproxy_ssl }}"
  #  haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  #  haproxy_port: "{{ nova_serialconsoleproxy_port | default('6083') }}"
  #  haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  #  haproxy_timeout_client: 60m
  #  haproxy_timeout_server: 60m
  #  haproxy_balance_alg: source
  #  haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['send ' ~ haproxy_nova_healthcheck_hdr ~ ' meth HEAD', 'expect status 405'], []) }}"
  #  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  #  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  #  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  #  haproxy_service_enabled: "{{ (groups['nova_console'] is defined and groups['nova_console'] | length > 0 and 'serialconsole' in nova_console_proxy_types) or
  #                               (groups['ironic_console'] is defined and groups['ironic_console'] | length > 0 and 'serialconsole' in nova_console_proxy_types) }}"
  #  haproxy_frontend_raw:
  #    - "http-request deny if { path,url_dec -m sub /. }"
  #
  #haproxy_nova_novnc_console_service:
  #  haproxy_service_name: nova_novnc_console
  #  haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) }}"
  #  haproxy_ssl: "{{ haproxy_ssl }}"
  #  haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  #  haproxy_port: "{{ nova_novncproxy_port | default('6080') }}"
  #  haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  #  haproxy_timeout_client: 60m
  #  haproxy_timeout_server: 60m
  #  haproxy_balance_alg: source
  #  haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['send ' ~ haproxy_nova_healthcheck_hdr ~ ' meth HEAD uri /vnc.html', 'expect status 200'], []) }}"
  #  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  #  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  #  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  #  haproxy_service_enabled: "{{ groups['nova_console'] is defined and groups['nova_console'] | length > 0 and 'novnc' in nova_console_proxy_types }}"
  #  haproxy_frontend_raw:
  #    - "http-request deny if { path,url_dec -m sub /. }"
  #
  ## NOTE(jrosser) Clean up legacy console haproxy configs from previous releases
  #haproxy_nova_console_service:
  #  haproxy_service_name: nova_console
  #  haproxy_service_enabled: False
  #
  #haproxy_nova_ironic_console_service:
  #  haproxy_service_name: nova_ironic_console
  #  haproxy_service_enabled: False
  #
  #haproxy_nova_console_http_mode: "{{ not (nova_console_user_ssl_cert is defined
  #                                         and nova_console_user_ssl_key is defined) }}"
  #
  #haproxy_nova_metadata_allowlist_networks: "{{ haproxy_allowlist_networks }}"
  #
  #haproxy_nova_healthcheck_hdr: 'hdr User-Agent "osa-proxy-healthcheck"'
  #
  #haproxy_nova_api_metadata_service:
  #  haproxy_service_name: nova_api_metadata
  #  haproxy_backend_nodes: "{{ groups['nova_api_metadata'] | default([]) }}"
  #  haproxy_bind: >-
  #    {{ [{
  #          'address': haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address),
  #          'interface': haproxy_bind_internal_lb_vip_interface | default('')
  #    }] }}
  #  haproxy_port: 8775
  #  haproxy_ssl: "{{ haproxy_ssl_all_vips }}"
  #  haproxy_balance_type: http
  #  haproxy_backend_httpcheck_options:
  #    - "{{ 'send ' ~ haproxy_nova_healthcheck_hdr ~  ' meth HEAD' }}"
  #  haproxy_allowlist_networks: "{{ haproxy_nova_metadata_allowlist_networks }}"
  #  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  #  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  #  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  #  haproxy_service_enabled: "{{ groups['nova_api_metadata'] is defined and groups['nova_api_metadata'] | length > 0 }}"
  #
  #haproxy_nova_api_compute_service:
  #  haproxy_service_name: nova_api_os_compute
  #  haproxy_backend_nodes: "{{ groups['nova_api_os_compute'] | default([]) }}"
  #  haproxy_ssl: "{{ haproxy_ssl }}"
  #  haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  #  haproxy_port: 8774
  #  haproxy_balance_type: http
  #  haproxy_backend_httpcheck_options:
  #    - "{{ 'send ' ~ haproxy_nova_healthcheck_hdr ~  ' meth HEAD' }}"
  #  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  #  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  #  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  #  haproxy_service_enabled: "{{ groups['nova_api_os_compute'] is defined and groups['nova_api_os_compute'] | length > 0 }}"
  #
  #haproxy_nova_spice_console_service:
  #  haproxy_service_name: nova_spice_console
  #  haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) }}"
  #  haproxy_ssl: "{{ haproxy_ssl }}"
  #  haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  #  haproxy_port: "{{ nova_spice_html5proxy_base_port | default('6082') }}"
  #  haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  #  haproxy_timeout_client: 60m
  #  haproxy_timeout_server: 60m
  #  haproxy_balance_alg: source
  #  haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['send ' ~ haproxy_nova_healthcheck_hdr ~ ' meth HEAD uri /spice_auto.html', 'expect status 200'], []) }}"
  #  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  #  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  #  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  #  haproxy_service_enabled: "{{ groups['nova_console'] is defined and groups['nova_console'] | length > 0 and 'spice' in nova_console_proxy_types }}"
  #  haproxy_frontend_raw:
  #    - "http-request deny if { path,url_dec -m sub /. }"
  #
  #haproxy_nova_serial_console_service:
  #  haproxy_service_name: nova_serial_console
  #  haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) + ((ironic_console_type == 'serialconsole') | ternary(groups['ironic_console'] | default([]), [])) }}"
  #  haproxy_ssl: "{{ haproxy_ssl }}"
  #  haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  #  haproxy_port: "{{ nova_serialconsoleproxy_port | default('6083') }}"
  #  haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  #  haproxy_timeout_client: 60m
  #  haproxy_timeout_server: 60m
  #  haproxy_balance_alg: source
  #  haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['send ' ~ haproxy_nova_healthcheck_hdr ~ ' meth HEAD', 'expect status 405'], []) }}"
  #  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  #  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  #  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  #  haproxy_service_enabled: "{{ (groups['nova_console'] is defined and groups['nova_console'] | length > 0 and 'serialconsole' in nova_console_proxy_types) or
  #                               (groups['ironic_console'] is defined and groups['ironic_console'] | length > 0 and 'serialconsole' in nova_console_proxy_types) }}"
  #  haproxy_frontend_raw:
  #    - "http-request deny if { path,url_dec -m sub /. }"
  #
  #haproxy_nova_novnc_console_service:
  #  haproxy_service_name: nova_novnc_console
  #  haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) }}"
  #  haproxy_ssl: "{{ haproxy_ssl }}"
  #  haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  #  haproxy_port: "{{ nova_novncproxy_port | default('6080') }}"
  #  haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  #  haproxy_timeout_client: 60m
  #  haproxy_timeout_server: 60m
  #  haproxy_balance_alg: source
  #  haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['send ' ~ haproxy_nova_healthcheck_hdr ~ ' meth HEAD uri /vnc.html', 'expect status 200'], []) }}"
  #  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  #  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  #  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  #  haproxy_service_enabled: "{{ groups['nova_console'] is defined and groups['nova_console'] | length > 0 and 'novnc' in nova_console_proxy_types }}"
  #  haproxy_frontend_raw:
  #    - "http-request deny if { path,url_dec -m sub /. }"
  #
  ## NOTE(jrosser) Clean up legacy console haproxy configs from previous releases
  #haproxy_nova_console_service:
  #  haproxy_service_name: nova_console
  #  haproxy_service_enabled: False
  #
  #haproxy_nova_ironic_console_service:
  #  haproxy_service_name: nova_ironic_console
  #  haproxy_service_enabled: False
  #
  #nova_haproxy_services:
  #  - "{{ haproxy_nova_api_metadata_service | combine(haproxy_nova_api_metadata_service_overrides | default({})) }}"
  #  - "{{ haproxy_nova_api_compute_service | combine(haproxy_nova_api_compute_service_overrides | default({})) }}"
  #  - "{{ haproxy_nova_spice_console_service | combine(haproxy_nova_spice_console_service_overrides | default({})) }}"
  #  - "{{ haproxy_nova_novnc_console_service | combine(haproxy_nova_novnc_console_service_overrides | default({})) }}"
  #  - "{{ haproxy_nova_serial_console_service | combine(haproxy_nova_serial_console_service_overrides | default({})) }}"
  #  - "{{ haproxy_nova_console_service | combine(haproxy_nova_console_service_overrides | default({})) }}"
  #  - "{{ haproxy_nova_ironic_console_service | combine(haproxy_nova_ironic_console_service_overrides | default({})) }}"    
